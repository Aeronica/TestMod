buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'java'
}
apply plugin: "net.minecraftforge.gradle.forge"
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

version = modVersion
group = 'tld.testmod'
archivesBaseName = "${modBaseName}-${minecraftVersion}"

repositories {
    mavenCentral()
}

configurations {
    shadow
    compile.extendsFrom shadow
}

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = "${project.forgeMappings}"

    replaceIn "tld/testmod/Main.java"
    replace "{@VERSION}", project.version
    replace "{@FORGE_VERSION}", "${project.forgeVersion}"
}

dependencies {
    // shadow "org.antlr:antlr4-runtime:4.7.2" // use ANTLR version 4
    shadow 'com.h2database:h2:1.4.200'
    shadow 'com.gitblit.iciql:iciql:2.2.0'
    shadow 'com.zaxxer:HikariCP:3.4.5'
    //compile files ('../aguiLib/build/libs/aguilib-1.12.2-0.1.0-alpha.0-dev.jar')
    //runtime files ('../aguiLib/build/libs/aguilib-1.12.2-0.1.0-alpha.0.jar')
}

shadowJar {
    // only include compile time dependencies
    configurations = [project.configurations.compile]
    archiveName = tasks.jar.archiveName
    // relocate 'org.antlr.v4.runtime', 'net.aeronica.shadowedlibs.org.antlr.v4.runtime'
    // relocate 'com.iciql', 'shadow.iciql'
    // relocate 'org.h2', 'shadow.h2'
}

reobfJar {
    setJar(tasks.shadowJar.archivePath)
}
reobfJar.dependsOn shadowJar

jar {
    configurations.shadow.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}
jar.dependsOn shadowJar
jar.enabled = true

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty("keyStore")
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build {
    dependsOn signJar
}
//sourceSets { main { output.resourcesDir = output.classesDir } }